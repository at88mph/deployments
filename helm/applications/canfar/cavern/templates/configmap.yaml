---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  namespace: {{ .Release.Namespace }}
data:
    cadc-log.properties: |
{{- range $val := .Values.global.loggingGroups }}
        group = {{ $val }}
{{- end }}
    cadc-registry.properties: |
        ivo://ivoa.net/std/GMS#search-1.0 = {{ .Values.global.gmsID | required "The GMS locator (gmsID) is required" }}
        ivo://ivoa.net/std/GMS#users-1.0 = {{ .Values.global.gmsID }}
        ivo://ivoa.net/std/UMS#users-1.0 = {{ .Values.global.gmsID }}
        ivo://ivoa.net/sso#OAuth = {{ .Values.global.oidcURI }}
        ivo://ivoa.net/sso#OpenID = {{ .Values.global.oidcURI }}

        # Ignore this, it's only here to satisfy the availability check.
        ivo://ivoa.net/std/CDP#proxy-1.0 = ivo://cadc.nrc.ca/cred

        http://www.opencadc.org/std/posix#group-mapping-0.1 = {{ .Values.posixMapperResourceID | required "The locator for the POSIX Mapper service (posixMapperResourceID) is required" }}
        http://www.opencadc.org/std/posix#user-mapping-0.1 = {{ .Values.posixMapperResourceID }}

        ca.nrc.cadc.reg.client.RegistryClient.baseURL = {{ .Values.global.registryURL | required "A registryURL is required" }}
    catalina.properties: |
        tomcat.connector.scheme=https
        tomcat.connector.proxyName={{ .Values.global.hostname }}
        tomcat.connector.proxyPort=443
        ca.nrc.cadc.auth.PrincipalExtractor.enableClientCertHeader=true
        ca.nrc.cadc.util.Log4jInit.messageOnly=true
        # (default: ca.nrc.cadc.auth.NoOpIdentityManager)
        ca.nrc.cadc.auth.IdentityManager={{ .Values.global.identityManagerClass }}

        ca.nrc.cadc.ac.ACIdentityManager.requireCompletePosixPrincipal=true

        # database connection pool

        {{- with required "UWS Database configuration is required." .Values.uwsDatabase }}
        org.opencadc.cavern.uws.maxActive={{ .maxActive }}
        org.opencadc.cavern.uws.username={{ .username }}
        org.opencadc.cavern.uws.password={{ .password }}
        {{- if .url }}
        org.opencadc.cavern.uws.url={{ .url }}
        {{- else }}
        org.opencadc.cavern.uws.url=jdbc:postgresql://{{ $.Release.Name }}-uws-postgres.{{ $.Release.Namespace }}:5432/{{ .database }}
        {{- end }}
        {{- end }}
    cavern.properties: |
        # service identity
        org.opencadc.cavern.resourceID = {{ .Values.resourceID }}
        # base directory for cavern files
        org.opencadc.cavern.filesystem.baseDir = {{ .Values.filesystem.dataDir }}
        # This subpath needs to match the subpath in Skaha's deployment.  If that one is configurable, so must this one be!
        org.opencadc.cavern.filesystem.subPath = {{ .Values.filesystem.subPath }}
        org.opencadc.cavern.nodes.QuotaPlugin = {{ .Values.quotaPlugin }}
        {{ $allocations := required ".Values.allocations is required." .Values.allocations }}
        
        {{- with $allocations }}
        # (optional) default allocation size in GB
        {{- if .defaultSizeGB }}
        org.opencadc.cavern.defaultQuotaGB = {{ .defaultSizeGB }}
        {{- end }}

        {{ $parentFolders := required "at least one parent folder is required in .Values.allocations.parentFolders.  Don't modify this unless you're absolutely sure!" .parentFolders }}
        {{ range $parentFolders }}
        # Required folders.  This will check for the existence of them, and create if necessary.
        org.opencadc.cavern.allocationParent = {{ . }}
        {{- end }}
        {{- end }}

        # (optional) API Keys with administrative privileges to create User Allocations.
        {{- range $clientName, $apiKey := .Values.adminAPIKeys }}
        org.opencadc.cavern.adminAPIKey = {{ printf "%s:%s" $clientName $apiKey }}
        {{- end }}

        {{- with .Values.filesystem.rootOwner }}
        # owner of root node has admin power
        org.opencadc.cavern.filesystem.rootOwner = {{ .adminUsername }}

        # (optional) username, uid, and gid (default) of the root owner
        {{- if .username }}
        org.opencadc.cavern.filesystem.rootOwner.username = {{ .username }}
        {{- else }}
        {{- required "value for .Values.filesystem.rootOwner.username is required." "" }}
        {{- end }}

        {{- if .uid }}
        org.opencadc.cavern.filesystem.rootOwner.uid = {{ .uid }}
        {{- else }}
        {{- required "value for .Values.filesystem.rootOwner.uid is required." "" }}
        {{- end }}

        {{- if .gid }}
        org.opencadc.cavern.filesystem.rootOwner.gid = {{ .gid }}
        {{- else }}
        {{- required "value for .Values.filesystem.rootOwner.gid is required." "" }}
        {{- end }}
        {{- end }}

        {{- with .Values.sshfs }}
        # (optional) base directory exposed for sshfs mounts
        # {server}[:{port}]:{path}
        org.opencadc.cavern.sshfs.serverBase = {{ .serverBase }}
        {{- end }}
    war-rename.conf: |
        {{- if .Values.applicationName }}
        mv cavern.war {{ .Values.applicationName }}.war
        {{- end }}

