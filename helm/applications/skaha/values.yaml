kubernetesClusterDomain: cluster.local

# Default values for skaha.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Tell Kubernetes to spin up multiple instances.  Defaults to 1.
replicaCount: 1

# It's best to keep these set as such, unless you're willing to change these in several places.
skaha:
  namespace: skaha-system
skahaWorkload:
  namespace: skaha-workload
 
# Skaha web service deployment
deployment:
  hostname: myhost.example.com  # Change this!
  skaha:
    image: images.opencadc.org/platform/skaha:0.29.2
    imagePullPolicy: IfNotPresent

    # Cron string for the image caching cron job schedule. Defaults to every half hour.
    imageCache:
      refreshSchedule: "*/30 * * * *"
  
    # Set the top-level-directory name that gets mounted at the root.
    # skahaTld: "/cavern"

    # Used when allocating first-time users into the system.
    defaultQuotaGB: "10"

    # Space delimited list of allowed Image Registry hosts.  These hosts should match the hosts in the User Session images.
    registryHosts: "images.canfar.net"

    init:
      # The image to use for the init container.  Unless you have a reason to change this, leave it alone.
      # This image is used to create the /home and /projects directories, in case Cavern is not already running.
      image: busybox:1.37.0
      imagePullPolicy: IfNotPresent

    # The IVOA GMS Group URI to verify users against for permission to use the Science Platform.
    # See https://www.ivoa.net/documents/GMS/20220222/REC-GMS-1.0.html#tth_sEc3.2
    # usersGroup: "ivo://example.org/gms?prototyping-groups/mini-src/platform-users"

    # The IVOA GMS Group URI to verify images without contacting Harbor.
    # See https://www.ivoa.net/documents/GMS/20220222/REC-GMS-1.0.html#tth_sEc3.2
    # adminsGroup: "ivo://example.org/gms?prototyping-groups/mini-src/platform-users"

    # Group URI for users to preempt headless jobs.
    # See https://www.ivoa.net/documents/GMS/20220222/REC-GMS-1.0.html#tth_sEc3.2
    # headlessGroup: "ivo://example.org/gms?prototyping-groups/mini-src/platform-users"

    # Group URI for users to ensure priority for their headless jobs.
    # See https://www.ivoa.net/documents/GMS/20220222/REC-GMS-1.0.html#tth_sEc3.2
    # headlessPriorityGroup: "ivo://example.org/gms?skaha-priority-headless-users"

    # Class name to set for priority headless jobs.
    # headlessPriorityClass: uber-user-preempt-high

    # Array of GMS Group URIs allowed to set the logging level.  If none set, then nobody can change the log level.
    # See https://www.ivoa.net/documents/GMS/20220222/REC-GMS-1.0.html#tth_sEc3.2 for GMS Group URIs
    # See https://github.com/opencadc/core/tree/main/cadc-log for Logging control
    # loggingGroups:
    #   - "ivo://example.org/gms?prototyping-groups/mini-src/platform-users"

    # The Resource ID (URI) of the Service that contains the Posix Mapping information
    # posixMapperResourceID: "ivo://example.org/posix-mapper"

    # URI or URL of the OIDC (IAM) server.  Used to validate incoming tokens.
    # oidcURI: https://iam.example.org/

    # The Resource ID (URI) of the GMS Service.
    # gmsID: ivo://example.org/gms

    # The absolute URL of the IVOA Registry where services are registered
    # registryURL: https://spsrc27.iaa.csic.es/reg

    # This applies to Skaha itself.  Meaning, this Pod will be scheduled as described
    # by the nodeAffinity clause.
    # Note the different indentation level compared to the sessions.nodeAffinity.
    # See https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity/
    # nodeAffinity: {}

    # Settings for User Sessions.  Sensible defaults supplied, but can be overridden.
    # For units of storage, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
    sessions:
      expirySeconds: "345600"   # Duration, in seconds, until they expire and are shut down.
      maxCount: "3"  # Max number of sessions per user.
      minEphemeralStorage: "20Gi"   # The initial requested amount of ephemeral (local) storage.  Does NOT apply to Desktop sessions.
      maxEphemeralStorage: "200Gi"  # The maximum amount of ephemeral (local) storage to allow a Session to extend to.  Does NOT apply to Desktop sessions.

      # Storage setings to be passed into the User Session Kubernetes Job spec.
      userStorage:
        # Required.  Absolute path mount point to where the top level directory is mounted in the User Sessions.  For most, this can be set to "/cavern", and
        # it is expected that the "/home" and the "/projects" folders will be found under this path (i.e. "/cavern/home" and "/cavern/projects").
        # Example:
        #   topLevelDirectory: "/cavern"
        #
        topLevelDirectory: "/cavern"

        # Required.  RELATIVE path to the User Storage Home folder.  This is the folder where the User's home directories will be created.  Defaults to "home".
        # Example:
        #   homeDirectory: "home"
        #
        homeDirectory: "home"

        # Required.  RELATIVE path to the User Storage Projects folder.  This is the folder where the Users can share data.  This is used for CARTA sessions.  Defaults to "projects".
        # Example:
        #   projectsDirectory: "projects"
        #
        projectsDirectory: "projects"

        # Optional. Name of the Persistent Volume Claim to use for User Storage.  Defaults to "skaha-workload-cavern-pvc".
        # Example:
        #   persistentVolumeClaimName: "skaha-workload-cavern-pvc"
        # persistentVolumeClaimName: 

        # Required.  The VOSpace Service URI (uses ivo:// scheme) for the Cavern Service.
        # This is the VOSpace location where user home directories will be created, as well as any other user data.  Requires Cavern to be running.
        # Example:
        #   serviceURI: "ivo://example.org/cavern"
        # serviceURI:

        # Required.  The VOSpace Resource ID (Node URI) prefix (uses vos:// scheme) for the Cavern Service.
        # Example:
        #   nodeURIPrefix: "vos://skao.int~cavern"
        # nodeURIPrefix:

        # Required.  These are the credentials and details to connect to the Cavern service to provide Administrative access to User Storage, namely creating new allocations.
        admin:
          auth:
            # Authenticate with an agreed API Key between Skaha and Cavern.  This is used to create new user home directories (allocations).
            # Generate Key: 
            #   $ openssl rand -base64 32
            #   $ jMTZdM/qqZ0knXUXbiX8T4T0CyGnhqWdJS2tVLZta2I=
            # Example:
            #   apiKey: "jMTZdM/qqZ0knXUXbiX8T4T0CyGnhqWdJS2tVLZta2I="  # Ensure this value is also used in the Cavern deployment's apiKeys object as "skaha:jMTZdM/qqZ0knXUXbiX8T4T0CyGnhqWdJS2tVLZta2I=".
            # apiKey:

            # Alternatively, you can specify a Kubernetes Secret that contains a PEM Client Certificate representing the User Storage Admin.
            # If both this and the OIDC Client are specified, Helm will throw an error.
            # Default key is "cadcproxy.pem", but you can override it.
            # Example:
            #   certificateSecret: 
            #     name: "science-platform-user-storage-admin-certificate"
            #     key: "certificate.pem"  # The key in the Secret that contains the PEM certificate
            # certificateSecret:

      # The image pull policy for User Sessions (applies to ALL types).  This is the default, but can be overridden.  Deafults to Always.
      # @see https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
      # Example:
      #   imagePullPolicy: IfNotPresent
      imagePullPolicy: Always 

      # Optionally configure the initContainer image for Redis.  Useful for those not able to reach docker.io
      # Defaults to redis-7.4.2-alpine3.21.
      # Example:
      #   initContainerImage: "private-image-repo/project/my-own-redis:1.0"
      # initContainerImage:

      # Optionally configure the Kueue system to handle large workloads.  Configurable per session type (e.g. desktop, notebook, etc.).
      # Leaving this empty will default to submitting Jobs to the base Kubernetes system.
      # Provide a default configuration for all session types, or omit and only configure specific session types.
      # @see https://kueue.sigs.k8s.io/docs/
      # @see https://github.com/opencadc/deployments/tree/main/configs/kueue
      # Example 1:
      #   # Configure notebook, desktop, and default session types.
      #   queue:
      #     notebook:
      #       queueName: "notebook-queue"
      #       priorityClass: "notebook-med"
      #     desktop:
      #       queueName: "desktop-queue"
      #       priorityClass: "desktop-high"
      #     default:
      #       queueName: "default-queue"
      #       priorityClass: "user-session-med"
      #
      # Example 2:
      #    # Configure contributed session types.  All else will use the bare Kubernetes system.
      #    queue:
      #      contributed:
      #        queueName: "contributed-queue"
      #        priorityClass: "contributed-high"
      #
      # Example 3:
      #    # Configure Kueue for all user session types.
      #    queue:
      #      default:
      #        queueName: "all-user-sessions-local-queue"
      #        priorityClass: "user-sessions-med"
      queue: {}

      # This is a list of tolerations that will be added to the Pod spec of the User Sessions.
      # @see https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      # @see ./README.md#notes-on-tolerations-and-nodeaffinity
      # 
      # Example:
      # tolerations:
      # - key: "key1"
      #   operator: "Equal"
      #   value: "value1"
      #   effect: "NoSchedule"
      # 
      tolerations: []

      # Optionally setup a separate host for User Sessions for Skaha to redirect to.  The HTTPS scheme is assumed.  Defaults to the Skaha hostname.
      # Example:
      #   hostname: myhost.example.org
      # hostname:

      # Optionally set the TLS configiuration that contains the certificate information for the alternate hostname for User Sessions.  This will go into the Traefik IngressRoute spec.
      # @see https://doc.traefik.io/traefik/v2.3/routing/providers/kubernetes-crd/#kind-ingressroute
      # Example:
      #   tls:
      #     secretName: myhost-tls-secret
      tls: {}

      # Declare extra volume mounts in User Sessions.  The "type: parameter in volume section is constant.
      # extraVolumes:
      # - name: example-pvc-name
      #   volume:
      #     type: PVC           # PVC is for Persistant volume claim
      #     name: pvc-name
      #   volumeMount:
      #     mountPath: "/pvc-volume-mount"
      #     subPath: "pvc"
      # - name: example-hostpath-name
      #   volume:
      #     type: HOST_PATH     # HOST_PATH is for host path
      #     hostPath: "/host-path"
      #     hostPathType: Directory
      #   volumeMount:
      #     mountPath: "/host-path"
      #     readOnly: true
      #     mountPropagation: HostToContainer
      # - name: config-map-volume
      #   volume:
      #     type: CONFIG_MAP    # CONFIG_MAP is for config map
      #     name: example-config-map-name
      #     defaultMode: "0777"
      #   volumeMount:
      #     mountPath: "/cmp"
      # - name: secret-volume
      #   volume:
      #     type: SECRET        # SECRET is for secrets
      #     name: example-secret-name
      #     defaultMode: "0777"
      #   volumeMount:
      #     mountPath: "/scrt"

      # When set to 'true' this flag will enable GPU node scheduling.  Don't forget to declare any related GPU configurations, if appropriate, in the nodeAffinity below!
      # gpuEnabled: false

      # Set the YAML that will go into the "affinity.nodeAffinity" stanza for Pod Spec in User Sessions.  This can be used to enable GPU scheduling, for example, 
      # or to control how and where User Session Pods are scheduled.  This can be potentially dangerous unless you know what you are doing.
      # See https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity
      # nodeAffinity: {}

    # Optionally set the DEBUG port.
    # extraEnv:
    # - name: CATALINA_OPTS
    #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
    # - name: JAVA_OPTS
    #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"

    # Resources provided to the Skaha service.
    # For units of storage, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "1500Mi"
        cpu: "750m"

    # Uncomment to debug.  Requires options above as well as service port exposure below.
    # extraPorts:
    # - containerPort: 5555
    #   protocol: TCP

    # Optionally mount a custom CA certificate
    # extraVolumeMounts:
    # - mountPath: "/config/cacerts"
    #   name: cacert-volume

    # If the base names have changed, then change them here, otherwise leave them.
    priorityClassName: uber-user-preempt-high
    serviceAccountName: skaha

    # The IdentityManager class handling authentication.  This should generally be left alone
    identityManagerClass: org.opencadc.auth.StandardIdentityManager

    # Create the CA certificate volume to be mounted in extraVolumeMounts
    # extraVolumes:
    # - name: cacert-volume
    #   secret:
    #     defaultMode: 420
    #     secretName: skaha-cacert-secret

  # Specify extra hostnames that will be added to the Pod's /etc/hosts file.  Note that this is in the
  # deployment object, not the skaha one.
  # extraHosts:
  #   - ip: 127.3.34.5
  #     hostname: myhost.example.org
  # extraHosts: []

# This is a list of tolerations that will be added to the Pod spec of the Skaha API.
# @see https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
# @see ./README.md#notes-on-tolerations-and-nodeaffinity
# 
# Example:
# tolerations:
# - key: "key1"
#   operator: "Equal"
#   value: "value1"
#   effect: "NoSchedule"
# 
tolerations: []

secrets:
  # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
  # skaha-cacert-secret:
  #   ca.crt: <base64 encoded CA crt>

# Set these appropriately to match your Persistent Volume labels.
storage:
  service:
    spec:
      # YAML for service mounted storage.
      # Example is the persistentVolumeClaim below.
      # persistentVolumeClaim:
      #   claimName: skaha-pvc\

# For caching images from the Image Repository and for the writing the POSIX Users and Groups to be shared with Job files
redis:
  architecture: 'standalone'
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
    containerSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
