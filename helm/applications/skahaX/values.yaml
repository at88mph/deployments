# Default values for skahaX.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: images.opencadc.org/platform/skaha
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.29.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

#
# Configuration specific to the Skaha service
#

# The absolute URL of the IVOA Registry where services are registered
# Example:
# registryURL: https://spsrc27.iaa.csic.es/reg
registryURL:

auth:
  # The IdentityManager class handling authentication.  Required.
  # org.opencadc.auth.StandardIdentityManager - Use OpenID Connect
  # ca.nrc.cadc.ac.ACIdentityManager - Use CADC's AC service (internal only)
  identityManagerClass:

  # The Resource ID (URI) of the GMS Service.
  # Example:
  # gmsID: ivo://example.org/gms
  gmsID:

  # The Resource ID (URI) of the Service that contains the Posix Mapping information
  # Example:
  # posixMapperResourceID: "ivo://example.org/posix-mapper"
  posixMapperResourceID:

  # URI or URL of the OIDC (IAM) server.  Used to validate incoming tokens and obtain user information with the StandardIdentityManager.
  # Example:
  # oidcURI: https://iam.example.org/

# Settings for User Sessions.  Sensible defaults supplied, but can be overridden.
# For units of storage, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
sessions:
  namespace:
    create: true
    name: "skaha-workload"
  expirySeconds: "345600"   # Duration, in seconds, until they expire and are shut down.
  maxCount: "3"  # Max number of sessions per user.
  minEphemeralStorage: "20Gi"   # The initial requested amount of ephemeral (local) storage.  Does NOT apply to Desktop sessions.
  maxEphemeralStorage: "200Gi"  # The maximum amount of ephemeral (local) storage to allow a Session to extend to.  Does NOT apply to Desktop sessions.

  # Optionally setup a separate host for User Sessions for Skaha to redirect to.  The HTTPS scheme is assumed.  Defaults to the Skaha hostname.
  # Example:
  #   hostname: myhost.example.org
  # hostname:

  # Optionally configure the Kueue system to handle large workloads.  Configurable per session type (e.g. desktop, notebook, etc.).
  # Leaving this empty will default to submitting Jobs to the base Kubernetes system.
  # Provide a default configuration for all session types, or omit and only configure specific session types.
  # @see https://kueue.sigs.k8s.io/docs/
  # @see https://github.com/opencadc/deployments/tree/main/configs/kueue
  # Example 1:
  #   # Configure notebook, desktop, and default session types.
  #   queue:
  #     notebook:
  #       queueName: "notebook-queue"
  #       priorityClass: "notebook-med"
  #     desktop:
  #       queueName: "desktop-queue"
  #       priorityClass: "desktop-high"
  #     default:
  #       queueName: "default-queue"
  #       priorityClass: "user-session-med"
  #
  # Example 2:
  #    # Configure contributed session types.  All else will use the bare Kubernetes system.
  #    queue:
  #      contributed:
  #        queueName: "contributed-queue"
  #        priorityClass: "contributed-high"
  #
  # Example 3:
  #    # Configure Kueue for all user session types.
  #    queue:
  #      default:
  #        queueName: "all-user-sessions-local-queue"
  #        priorityClass: "user-sessions-med"
  queue: {}

  # Declare extra volume mounts in User Sessions.  The "type: parameter in volume section is constant.
  # extraVolumes:
  # - name: example-pvc-name
  #   volume:
  #     type: PVC           # PVC is for Persistant volume claim
  #     name: pvc-name
  #   volumeMount:
  #     mountPath: "/pvc-volume-mount"
  #     subPath: "pvc"
  # - name: example-hostpath-name
  #   volume:
  #     type: HOST_PATH     # HOST_PATH is for host path
  #     hostPath: "/host-path"
  #     hostPathType: Directory
  #   volumeMount:
  #     mountPath: "/host-path"
  #     readOnly: true
  #     mountPropagation: HostToContainer
  # - name: config-map-volume
  #   volume:
  #     type: CONFIG_MAP    # CONFIG_MAP is for config map
  #     name: example-config-map-name
  #     defaultMode: "0777"
  #   volumeMount:
  #     mountPath: "/cmp"
  # - name: secret-volume
  #   volume:
  #     type: SECRET        # SECRET is for secrets
  #     name: example-secret-name
  #     defaultMode: "0777"
  #   volumeMount:
  #     mountPath: "/scrt"

  # When set to 'true' this flag will enable GPU node scheduling.  Don't forget to declare any related GPU configurations, if appropriate, in the nodeAffinity below!
  # gpuEnabled: false
  gpuEnabled: false

  # Set the YAML that will go into the "affinity" stanza for Pod Spec in User Sessions.  This can be used to enable GPU scheduling, for example, 
  # or to control how and where User Session Pods are scheduled.  This can be potentially dangerous unless you know what you are doing.
  # See https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity
  # affinity: {}

secrets:
  # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
  # skaha-cacert-secret:
  #   ca.crt: <base64 encoded CA crt>

# Set these appropriately to match your Persistent Volume labels.
storage:
  spec:
    # YAML for service mounted storage.
    # Example is the persistentVolumeClaim below.
    # persistentVolumeClaim:
    #   claimName: skaha-pvc

# For caching images from the Image Repository and for the writing the POSIX Users and Groups to be shared with Job files
# @see https://github.com/bitnami/charts/tree/main/bitnami/redis
redis:
  architecture: 'standalone'
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
    containerSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
