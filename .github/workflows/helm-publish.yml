name: Helm Publish

on:
  repository_dispatch:
    types: [helm-release-build]

permissions:
  contents: read
  packages: write
  id-token: write  # Required for keyless signing with Sigstore
  attestations: write  # Required for GitHub attestations

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: production  # Use deployment environment for secrets
    steps:
      - name: Print Incoming Payload
        id: payload
        run: |
          echo "=== Repository Dispatch Payload ==="
          echo "Event Type: ${{ github.event.action }}"
          echo ""
          echo "=== Client Payload ==="
          echo "Chart Name: ${{ github.event.client_payload.chart_name }}"
          echo "Chart Path: ${{ github.event.client_payload.chart_path }}"
          echo "Chart Version: ${{ github.event.client_payload.chart_version }}"
          echo "Tag Name: ${{ github.event.client_payload.tag_name }}"
          echo "SHA: ${{ github.event.client_payload.sha }}"
          echo ""
          echo "=== Full Payload (JSON) ==="
          echo '${{ toJson(github.event.client_payload) }}'
          # Set outputs for future steps
          echo "CHART_NAME=${{ github.event.client_payload.chart_name }}" >> $GITHUB_OUTPUT
          echo "CHART_PATH=${{ github.event.client_payload.chart_path }}" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=${{ github.event.client_payload.chart_version }}" >> $GITHUB_OUTPUT
          echo "CHART_TAG_NAME=${{ github.event.client_payload.tag_name }}" >> $GITHUB_OUTPUT
          echo "CHART_SHA=${{ github.event.client_payload.sha }}" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: Set up Helm
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4
        with:
          version: 'latest'

      - name: Install Cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0

      - name: Log in to OCI Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ secrets.HELM_REGISTRY }}
          username: ${{ secrets.HELM_USERNAME }}
          password: ${{ secrets.HELM_PASSWORD }}

      - name: Package Helm Chart
        id: package
        run: |
          CHART_PATH="${{ steps.payload.outputs.CHART_PATH }}"
          CHART_NAME="${{ steps.payload.outputs.CHART_NAME }}"
          CHART_VERSION="${{ steps.payload.outputs.CHART_VERSION }}"

          echo "Packaging Helm chart: $CHART_NAME v$CHART_VERSION"

          # Create output directory
          mkdir -p helm-packages

          # Package the chart
          helm package "$CHART_PATH" \
            --destination helm-packages \
            --version "$CHART_VERSION"

          # Get the package filename
          CHART_PACKAGE=$(ls helm-packages/*.tgz | head -1)
          echo "CHART_PACKAGE=$CHART_PACKAGE" >> $GITHUB_OUTPUT

          echo "Chart Packaged: $CHART_PACKAGE"

      - name: Push Chart to OCI Registry
        id: push
        run: |
          CHART_NAME="${{ steps.payload.outputs.CHART_NAME }}"
          CHART_VERSION="${{ steps.payload.outputs.CHART_VERSION }}"
          CHART_PACKAGE="${{ steps.package.outputs.CHART_PACKAGE }}"
          REGISTRY="${{ secrets.HELM_REGISTRY }}"

          echo "Pushing chart to OCI registry..."

          # Push chart to OCI registry and capture output
          PUSH_OUTPUT=$(helm push "$CHART_PACKAGE" "oci://${REGISTRY}" 2>&1)
          echo "$PUSH_OUTPUT"

          # Extract digest from output (format: "Digest: sha256:...")
          DIGEST=$(echo "$PUSH_OUTPUT" | grep -oP 'Digest: \K.*' || echo "")

          # Construct the full OCI reference
          OCI_REFERENCE="${REGISTRY}/${CHART_NAME}:${CHART_VERSION}"
          echo "OCI_REFERENCE=$OCI_REFERENCE" >> $GITHUB_OUTPUT

          if [ -n "$DIGEST" ]; then
            echo "digest=$DIGEST" >> $GITHUB_OUTPUT
            echo "Chart Digest: $DIGEST"
          fi

          echo "Chart Pushed: $OCI_REFERENCE"

      - name: Sign Chart with Cosign (Keyless)
        id: sign
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          OCI_REFERENCE="${{ steps.push.outputs.OCI_REFERENCE }}"

          echo "Signing chart with Sigstore/Cosign (keyless)..."

          # Sign the chart using keyless signing with OIDC
          cosign sign --yes "$OCI_REFERENCE"

          echo "Chart Signed: $OCI_REFERENCE"

      - name: Verify Chart Signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          OCI_REFERENCE="${{ steps.push.outputs.OCI_REFERENCE }}"

          echo "Verifying Chart Signature..."

          # Verify the signature using keyless verification
          # This verifies against the Sigstore transparency log
          cosign verify \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "$OCI_REFERENCE"

          echo "Chart Signature Verified: $OCI_REFERENCE"

      - name: Generate Attestation
        id: attest
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-name: ${{ steps.push.outputs.OCI_REFERENCE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Create Release Notes
        run: |
          CHART_NAME="${{ steps.payload.outputs.CHART_NAME }}"
          CHART_VERSION="${{ steps.payload.outputs.CHART_VERSION }}"
          TAG_NAME="${{ steps.payload.outputs.CHART_TAG_NAME }}"
          SHA="${{ steps.payload.outputs.CHART_SHA }}"
          OCI_REFERENCE="${{ steps.push.outputs.OCI_REFERENCE }}"
          REGISTRY="${{ secrets.HELM_REGISTRY }}"

          cat > release-notes.md <<'EOF'
          # Helm Chart Release: #${CHART_NAME} v${CHART_VERSION}

          **Release Tag:** ${TAG_NAME}
          **Commit SHA:** ${SHA}

          ## OCI Registry Location

          ```
          ${OCI_REFERENCE}
          ```

          ## Installation

          Pull and install the chart using Helm:

          ```bash
          # Pull the chart
          helm pull oci://${REGISTRY}/${CHART_NAME} --version ${CHART_VERSION}

          # Install the chart
          helm install ${CHART_NAME} oci://${REGISTRY}/${CHART_NAME} --version ${CHART_VERSION}
          ```

          ## Security & Verification

          ### Keyless Signature Verification

          This chart has been signed using **Sigstore/Cosign Keyless Signing**. Verify the signature:

          ```bash
          # Install Cosign
          brew install cosign

          # Set experimental mode for keyless verification
          export COSIGN_EXPERIMENTAL=1

          # Verify the signature
          cosign verify \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            ${OCI_REFERENCE}
          ```

          ### GitHub Attestation

          This chart includes a GitHub attestation for build provenance. You can verify it using:

          ```bash
          gh attestation verify oci://${OCI_REFERENCE} --owner ${{ github.repository_owner }}
          ```

          ## What is Keyless Signing?

          This chart uses **Sigstore's Keyless Signing** which:
          - ✅ No private keys to manage or secure
          - ✅ Uses OpenID Connect (OIDC) for identity verification
          - ✅ Signatures are stored in a public transparency log (Rekor)
          - ✅ Provides cryptographic proof of when and by whom the chart was signed

          Learn more: https://docs.sigstore.dev/cosign/keyless/
          EOF

          echo "Release notes created"

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4
        with:
          name: helm-chart-${{ github.event.client_payload.chart_name }}-${{ github.event.client_payload.chart_version }}
          path: |
            helm-packages/
            release-notes.md
          retention-days: 30

      - name: Summary
        run: |
          echo "## 🎉 Helm Chart Published Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Chart:** ${{ github.event.client_payload.chart_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.client_payload.chart_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**OCI Reference:** \`${{ env.OCI_REFERENCE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Packaged Helm chart" >> $GITHUB_STEP_SUMMARY
          echo "- Pushed to OCI registry" >> $GITHUB_STEP_SUMMARY
          echo "- Signed with Sigstore/Cosign (keyless)" >> $GITHUB_STEP_SUMMARY
          echo "- Verified signature" >> $GITHUB_STEP_SUMMARY
          echo "- Generated GitHub attestation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Security" >> $GITHUB_STEP_SUMMARY
          echo "This chart is signed using **keyless signing** with Sigstore/Cosign." >> $GITHUB_STEP_SUMMARY
          echo "No private keys were used - authentication via OIDC." >> $GITHUB_STEP_SUMMARY
